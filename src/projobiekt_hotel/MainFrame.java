/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projobiekt_hotel;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Bieron
 */
public class MainFrame extends javax.swing.JFrame {

    protected static ListsCloud lists = ListsCloud.getInstance();
    private boolean signinMode;
    protected static User loggedUser = null;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userTypeGroup = new javax.swing.ButtonGroup();
        ListbuttonGroup = new javax.swing.ButtonGroup();
        jPanelLogin = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldEmail = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButtonConfirm = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jPanelNameArea = new javax.swing.JPanel();
        jTextFieldName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanelUserType = new javax.swing.JPanel();
        jCheckBoxManager = new javax.swing.JCheckBox();
        jCheckBoxEmployee = new javax.swing.JCheckBox();
        jCheckBoxGuest = new javax.swing.JCheckBox();
        jPanelEmployeeVerification = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPasswordVerifyField = new javax.swing.JPasswordField();
        jPasswordField = new javax.swing.JPasswordField();
        jButtonSignIn = new javax.swing.JButton();
        jButtonLogIn = new javax.swing.JButton();
        jButtonCheckReservations = new javax.swing.JButton();
        jPanelLoggedInButtons = new javax.swing.JPanel();
        jButtonReservationAdd = new javax.swing.JButton();
        jButtonReservationCancel = new javax.swing.JButton();
        jButtonAddRoom = new javax.swing.JButton();
        jButtonRemoveRoom = new javax.swing.JButton();
        jButtonRemoveUser = new javax.swing.JButton();
        jButtonLogOut = new javax.swing.JButton();
        jButtonValidateReservations = new javax.swing.JButton();
        jPanelListType = new javax.swing.JPanel();
        jToggleButtonRooms = new javax.swing.JToggleButton();
        jToggleButtonUsers = new javax.swing.JToggleButton();
        jToggleButtonReservationList = new javax.swing.JToggleButton();
        jPanelCheck = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jXDatePickerCheckFrom = new org.jdesktop.swingx.JXDatePicker();
        jLabel6 = new javax.swing.JLabel();
        jXDatePickerCheckTo = new org.jdesktop.swingx.JXDatePicker();
        jButtonCheck = new javax.swing.JButton();
        jButtonCancelCheck = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableListHolder = new javax.swing.JTable();
        jButtonClearTable = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hotel main window");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Email");
        jLabel1.setToolTipText("");

        jLabel2.setText("Password");

        jButtonConfirm.setText("OK");
        jButtonConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonConfirmMouseClicked(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCancelMouseClicked(evt);
            }
        });

        jLabel3.setText("Name");
        jLabel3.setToolTipText("");

        javax.swing.GroupLayout jPanelNameAreaLayout = new javax.swing.GroupLayout(jPanelNameArea);
        jPanelNameArea.setLayout(jPanelNameAreaLayout);
        jPanelNameAreaLayout.setHorizontalGroup(
            jPanelNameAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNameAreaLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanelNameAreaLayout.setVerticalGroup(
            jPanelNameAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNameAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNameAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        userTypeGroup.add(jCheckBoxManager);
        jCheckBoxManager.setText("Manager");
        jCheckBoxManager.setToolTipText("");
        jCheckBoxManager.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxManagerItemStateChanged(evt);
            }
        });

        userTypeGroup.add(jCheckBoxEmployee);
        jCheckBoxEmployee.setText("Employee");
        jCheckBoxEmployee.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxEmployeeItemStateChanged(evt);
            }
        });

        userTypeGroup.add(jCheckBoxGuest);
        jCheckBoxGuest.setText("Guest");
        jCheckBoxGuest.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxGuestItemStateChanged(evt);
            }
        });

        jLabel4.setText("Verfication password");

        jPasswordVerifyField.setToolTipText("");

        javax.swing.GroupLayout jPanelEmployeeVerificationLayout = new javax.swing.GroupLayout(jPanelEmployeeVerification);
        jPanelEmployeeVerification.setLayout(jPanelEmployeeVerificationLayout);
        jPanelEmployeeVerificationLayout.setHorizontalGroup(
            jPanelEmployeeVerificationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEmployeeVerificationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPasswordVerifyField, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelEmployeeVerificationLayout.setVerticalGroup(
            jPanelEmployeeVerificationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEmployeeVerificationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEmployeeVerificationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jPasswordVerifyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelUserTypeLayout = new javax.swing.GroupLayout(jPanelUserType);
        jPanelUserType.setLayout(jPanelUserTypeLayout);
        jPanelUserTypeLayout.setHorizontalGroup(
            jPanelUserTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUserTypeLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jCheckBoxManager)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxEmployee)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxGuest)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelUserTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelEmployeeVerification, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelUserTypeLayout.setVerticalGroup(
            jPanelUserTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUserTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelUserTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxManager)
                    .addComponent(jCheckBoxEmployee)
                    .addComponent(jCheckBoxGuest))
                .addGap(18, 18, 18)
                .addComponent(jPanelEmployeeVerification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPasswordField.setToolTipText("");

        javax.swing.GroupLayout jPanelLoginLayout = new javax.swing.GroupLayout(jPanelLogin);
        jPanelLogin.setLayout(jPanelLoginLayout);
        jPanelLoginLayout.setHorizontalGroup(
            jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoginLayout.createSequentialGroup()
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelLoginLayout.createSequentialGroup()
                                .addComponent(jPanelNameArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 27, Short.MAX_VALUE))
                            .addComponent(jPanelUserType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelLoginLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(jTextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPasswordField))))
                            .addGroup(jPanelLoginLayout.createSequentialGroup()
                                .addGap(191, 191, 191)
                                .addComponent(jButtonCancel)
                                .addGap(31, 31, 31)
                                .addComponent(jButtonConfirm)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelLoginLayout.setVerticalGroup(
            jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoginLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanelNameArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanelUserType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonConfirm))
                .addGap(21, 21, 21))
        );

        jButtonSignIn.setText("Sign in");
        jButtonSignIn.setName(""); // NOI18N
        jButtonSignIn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSignInMouseClicked(evt);
            }
        });

        jButtonLogIn.setText("Log in");
        jButtonLogIn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonLogInMouseClicked(evt);
            }
        });

        jButtonCheckReservations.setText("Check reservations");
        jButtonCheckReservations.setToolTipText("");
        jButtonCheckReservations.setActionCommand("Check room avalabity");
        jButtonCheckReservations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCheckReservationsMouseClicked(evt);
            }
        });

        jButtonReservationAdd.setText("Reserve room");
        jButtonReservationAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonReservationAddMouseClicked(evt);
            }
        });

        jButtonReservationCancel.setText("Cancel reservaton");
        jButtonReservationCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonReservationCancelMouseClicked(evt);
            }
        });

        jButtonAddRoom.setText("Add room");
        jButtonAddRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAddRoomMouseClicked(evt);
            }
        });

        jButtonRemoveRoom.setText("Remove room");
        jButtonRemoveRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonRemoveRoomMouseClicked(evt);
            }
        });

        jButtonRemoveUser.setText("Remove user");
        jButtonRemoveUser.setToolTipText("");
        jButtonRemoveUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonRemoveUserMouseClicked(evt);
            }
        });

        jButtonLogOut.setText("Log out");
        jButtonLogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonLogOutMouseClicked(evt);
            }
        });

        jButtonValidateReservations.setText("Validate reservations");
        jButtonValidateReservations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonValidateReservationsMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelLoggedInButtonsLayout = new javax.swing.GroupLayout(jPanelLoggedInButtons);
        jPanelLoggedInButtons.setLayout(jPanelLoggedInButtonsLayout);
        jPanelLoggedInButtonsLayout.setHorizontalGroup(
            jPanelLoggedInButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoggedInButtonsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jButtonLogOut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonReservationAdd)
                .addGap(18, 18, 18)
                .addComponent(jButtonValidateReservations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButtonReservationCancel)
                .addGap(18, 18, 18)
                .addComponent(jButtonAddRoom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRemoveRoom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRemoveUser)
                .addContainerGap())
        );
        jPanelLoggedInButtonsLayout.setVerticalGroup(
            jPanelLoggedInButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoggedInButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButtonReservationAdd)
                .addComponent(jButtonReservationCancel)
                .addComponent(jButtonAddRoom)
                .addComponent(jButtonRemoveRoom)
                .addComponent(jButtonRemoveUser)
                .addComponent(jButtonLogOut)
                .addComponent(jButtonValidateReservations))
        );

        ListbuttonGroup.add(jToggleButtonRooms);
        jToggleButtonRooms.setText("Rooms");
        jToggleButtonRooms.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButtonRoomsItemStateChanged(evt);
            }
        });

        ListbuttonGroup.add(jToggleButtonUsers);
        jToggleButtonUsers.setText("Users");
        jToggleButtonUsers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButtonUsersItemStateChanged(evt);
            }
        });

        ListbuttonGroup.add(jToggleButtonReservationList);
        jToggleButtonReservationList.setText("Reservations");
        jToggleButtonReservationList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButtonReservationListItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelListTypeLayout = new javax.swing.GroupLayout(jPanelListType);
        jPanelListType.setLayout(jPanelListTypeLayout);
        jPanelListTypeLayout.setHorizontalGroup(
            jPanelListTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelListTypeLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jToggleButtonReservationList)
                .addGap(26, 26, 26)
                .addComponent(jToggleButtonRooms)
                .addGap(30, 30, 30)
                .addComponent(jToggleButtonUsers)
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanelListTypeLayout.setVerticalGroup(
            jPanelListTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelListTypeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelListTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButtonRooms)
                    .addComponent(jToggleButtonUsers)
                    .addComponent(jToggleButtonReservationList))
                .addContainerGap())
        );

        jLabel5.setText("From:");

        jLabel6.setText("To:");

        jButtonCheck.setText("Check");
        jButtonCheck.setToolTipText("");
        jButtonCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCheckMouseClicked(evt);
            }
        });

        jButtonCancelCheck.setText("Cancel");
        jButtonCancelCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCancelCheckMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelCheckLayout = new javax.swing.GroupLayout(jPanelCheck);
        jPanelCheck.setLayout(jPanelCheckLayout);
        jPanelCheckLayout.setHorizontalGroup(
            jPanelCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCheckLayout.createSequentialGroup()
                .addGroup(jPanelCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCheckLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jXDatePickerCheckFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jXDatePickerCheckTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelCheckLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jButtonCheck)
                        .addGap(38, 38, 38)
                        .addComponent(jButtonCancelCheck)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanelCheckLayout.setVerticalGroup(
            jPanelCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCheckLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jXDatePickerCheckFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jXDatePickerCheckTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(jPanelCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCheck)
                    .addComponent(jButtonCancelCheck))
                .addContainerGap())
        );

        jTableListHolder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableListHolder);

        jButtonClearTable.setText("Clear Table");
        jButtonClearTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonClearTableMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jPanelLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelListType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanelCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonClearTable))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jButtonSignIn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButtonLogIn)
                        .addGap(28, 28, 28)
                        .addComponent(jButtonCheckReservations)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelLoggedInButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSignIn)
                        .addComponent(jButtonLogIn)
                        .addComponent(jButtonCheckReservations))
                    .addComponent(jPanelLoggedInButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelListType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonClearTable)))
                    .addComponent(jPanelLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSignInMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSignInMouseClicked
        // TODO add your handling code here:
        this.jPanelLogin.setVisible(true);
        this.jPanelNameArea.setVisible(true);
        this.jPanelUserType.setVisible(true);
        this.jButtonLogIn.setVisible(false);
        this.jButtonSignIn.setVisible(false);
        this.jPanelEmployeeVerification.setVisible(false);
        this.signinMode = true;
    }//GEN-LAST:event_jButtonSignInMouseClicked

    private void jButtonLogInMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonLogInMouseClicked
        // TODO add your handling code here:
        this.jPanelLogin.setVisible(true);
        this.jPanelNameArea.setVisible(false);
        this.jPanelUserType.setVisible(false);
        this.jButtonLogIn.setVisible(false);
        this.jButtonSignIn.setVisible(false);
        this.jPanelEmployeeVerification.setVisible(false);
        this.signinMode = false;
    }//GEN-LAST:event_jButtonLogInMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        if (loggedUser != null) {
            this.jPanelLogin.setVisible(false);
            this.jPanelCheck.setVisible(false);
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            this.jXDatePickerCheckFrom.setFormats(dateFormat);
            this.jXDatePickerCheckTo.setFormats(dateFormat);
            this.jButtonLogIn.setVisible(false);
            this.jButtonSignIn.setVisible(false);
            this.jToggleButtonReservationList.setVisible(true);
            this.jToggleButtonRooms.setVisible(true);
            this.jToggleButtonReservationList.setSelected(true);
            this.signinMode = false;
            if(loggedUser.role() == UserRole.EMPLOYEE) {
                        this.jButtonRemoveRoom.setVisible(false);
                        this.jButtonAddRoom.setVisible(true);
                        this.jButtonRemoveUser.setVisible(false);
                        this.jToggleButtonUsers.setVisible(false);
                        this.jButtonValidateReservations.setVisible(true);
                    }
                    else if(loggedUser.role() == UserRole.MANAGER) {
                        this.jButtonRemoveRoom.setVisible(true);
                        this.jButtonAddRoom.setVisible(true);
                        this.jButtonRemoveUser.setVisible(true);
                        this.jToggleButtonUsers.setVisible(true);
                        this.jButtonValidateReservations.setVisible(true);
                    }
                    else {
                        this.jButtonRemoveRoom.setVisible(false);
                        this.jButtonAddRoom.setVisible(false);
                        this.jButtonRemoveUser.setVisible(false);
                        this.jToggleButtonUsers.setVisible(false);
                        this.jButtonValidateReservations.setVisible(false);
                    }
        }
        else {
            this.jPanelLogin.setVisible(false);
            this.jPanelLoggedInButtons.setVisible(false);
            this.jPanelListType.setVisible(false);
            this.jPanelCheck.setVisible(false);
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            this.jXDatePickerCheckFrom.setFormats(dateFormat);
            this.jXDatePickerCheckTo.setFormats(dateFormat);
            this.signinMode = false;
        }

    }//GEN-LAST:event_formWindowOpened

    private void jButtonCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCancelMouseClicked
        // TODO add your handling code here:
        this.jPanelLogin.setVisible(false);
        this.jButtonLogIn.setVisible(true);
        this.jButtonSignIn.setVisible(true);
        this.userTypeGroup.clearSelection();
        this.jTextFieldEmail.setText("");
        this.jTextFieldName.setText("");
        this.jPasswordField.setText("");
        this.jPasswordVerifyField.setText("");
        this.jPanelEmployeeVerification.setVisible(false);        
        this.signinMode = false;
        this.userTypeGroup.clearSelection();
    }//GEN-LAST:event_jButtonCancelMouseClicked

    private void jButtonConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonConfirmMouseClicked
        // TODO add your handling code here:
        this.jPanelLogin.setVisible(false);    
        if(this.signinMode) {
            try {
                String userType = "";
                if(this.jCheckBoxEmployee.isSelected()) {
                    userType = UserRole.EMPLOYEE.toString();
                }
                else if(this.jCheckBoxGuest.isSelected()) {
                    userType = UserRole.GUEST.toString();
                }
                else if(this.jCheckBoxManager.isSelected()) {
                    userType = UserRole.MANAGER.toString();
                }
                
                if(userType.equals(UserRole.MANAGER.toString()) || userType.equals(UserRole.EMPLOYEE.toString())) {
                    if(!UsersManager.correctSecretPassword(Arrays.toString(jPasswordVerifyField.getPassword()))) {
                        JOptionPane.showMessageDialog(rootPane, "Invalid verification password", null,JOptionPane.INFORMATION_MESSAGE);
                        this.jPanelLogin.setVisible(true); 
                        return;
                    } 
                } 
                boolean result = UsersManager.register(jTextFieldEmail.getText(), Arrays.toString(jPasswordField.getPassword()),jTextFieldName.getText(),userType);
                if(!result) {
                    JOptionPane.showMessageDialog(rootPane, "Couldn't register user", null,JOptionPane.INFORMATION_MESSAGE);
                }
                else {
                    lists.saveLists();
                }
            }
            catch(Exception ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage(), null,JOptionPane.ERROR_MESSAGE);            
            }
            this.jTextFieldEmail.setText("");
            this.jTextFieldName.setText("");
            this.jPasswordField.setText("");
            this.jPasswordVerifyField.setText("");
            this.jPanelEmployeeVerification.setVisible(false);
            this.jPanelLogin.setVisible(false);
            this.jButtonLogIn.setVisible(true);
            this.jButtonSignIn.setVisible(true);
            this.userTypeGroup.clearSelection();
        }
        else {    
            if (UsersManager.login(jTextFieldEmail.getText(), Arrays.toString(jPasswordField.getPassword()))) {
                this.jPanelLoggedInButtons.setVisible(true);
                try {
                    loggedUser = UsersManager.getUserByMail(jTextFieldEmail.getText());
                    this.jPanelListType.setVisible(true);
                    this.jToggleButtonReservationList.setVisible(true);
                    this.jToggleButtonRooms.setVisible(true);
                    if(loggedUser.role() == UserRole.EMPLOYEE) {
                        this.jButtonRemoveRoom.setVisible(false);
                        this.jButtonAddRoom.setVisible(true);
                        this.jButtonRemoveUser.setVisible(false);
                        this.jToggleButtonUsers.setVisible(false);
                        this.jButtonValidateReservations.setVisible(true);
                    }
                    else if(loggedUser.role() == UserRole.MANAGER) {
                        this.jButtonRemoveRoom.setVisible(true);
                        this.jButtonAddRoom.setVisible(true);
                        this.jButtonRemoveUser.setVisible(true);
                        this.jToggleButtonUsers.setVisible(true);
                        this.jButtonValidateReservations.setVisible(true);
                    }
                    else {
                        this.jButtonRemoveRoom.setVisible(false);
                        this.jButtonAddRoom.setVisible(false);
                        this.jButtonRemoveUser.setVisible(false);
                        this.jToggleButtonUsers.setVisible(false);
                        this.jButtonValidateReservations.setVisible(false);
                    }
                    this.jToggleButtonReservationList.setSelected(true);
                }
                catch(Exception ex) {
                    JOptionPane.showMessageDialog(rootPane, "Something went wrong. Terminating application", null,JOptionPane.ERROR_MESSAGE); 
                    System.exit(1);
                }
            }
            else {
                JOptionPane.showMessageDialog(rootPane, "Invalid user creditianals", null,JOptionPane.INFORMATION_MESSAGE);
                this.jButtonLogIn.setVisible(true);
                this.jButtonSignIn.setVisible(true);
            }
            this.jPanelEmployeeVerification.setVisible(false);
            this.jTextFieldEmail.setText("");
            this.jPasswordField.setText("");
            this.jPanelLogin.setVisible(false);
            this.userTypeGroup.clearSelection();
                 
        }
    }//GEN-LAST:event_jButtonConfirmMouseClicked

    private void jCheckBoxManagerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxManagerItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() == 1) {
            this.jPanelEmployeeVerification.setVisible(true);
        } 
         
    }//GEN-LAST:event_jCheckBoxManagerItemStateChanged

    private void jCheckBoxEmployeeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxEmployeeItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() == 1) {
            this.jPanelEmployeeVerification.setVisible(true);
        } 
    }//GEN-LAST:event_jCheckBoxEmployeeItemStateChanged

    private void jCheckBoxGuestItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxGuestItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() == 1) {
            this.jPanelEmployeeVerification.setVisible(false);
        }
        
    }//GEN-LAST:event_jCheckBoxGuestItemStateChanged

    private void jButtonLogOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonLogOutMouseClicked
        // TODO add your handling code here:
        this.jPanelLoggedInButtons.setVisible(false);
        this.jButtonLogIn.setVisible(true);
        this.jButtonSignIn.setVisible(true);
        this.jPanelListType.setVisible(false);
        this.jToggleButtonRooms.setVisible(false);
        this.jToggleButtonUsers.setVisible(false);
        this.jToggleButtonReservationList.setVisible(false);
        this.jTableListHolder.setModel(new DefaultTableModel());
        loggedUser = null;
    }//GEN-LAST:event_jButtonLogOutMouseClicked

    private void jButtonCheckReservationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCheckReservationsMouseClicked
        // TODO add your handling code here:
        this.jPanelListType.setVisible(true);
        this.jToggleButtonRooms.setVisible(false);
        this.jToggleButtonUsers.setVisible(false);
        this.jToggleButtonReservationList.setSelected(true);
        this.jTableListHolder.setModel(new DefaultTableModel());
        this.jPanelCheck.setVisible(true);
    }//GEN-LAST:event_jButtonCheckReservationsMouseClicked

    private void jButtonCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCheckMouseClicked
        // TODO add your handling code here:
        Date fromDate = this.jXDatePickerCheckFrom.getDate();
        Date toDate = this.jXDatePickerCheckTo.getDate();
        if ( fromDate == null || toDate == null ) {
            JOptionPane.showMessageDialog(rootPane, "Incorrect user imput. Please enter the check dates again.", null,JOptionPane.ERROR_MESSAGE); 
            return;
        }
        DefaultTableModel model = new DefaultTableModel(){

                @Override
                 public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
        };
        if(loggedUser == null || loggedUser.role() == UserRole.GUEST) {
            model.addColumn("Room");
            model.addColumn("Reservation from");
            model.addColumn("Reservation to");
                
        }
        else {
            model.addColumn("Room");
            model.addColumn("Reservation from");
            model.addColumn("Reservation to");
            model.addColumn("Employee email");
            model.addColumn("Guest email");
        }
        ArrayList<Reservation> reservations = lists.CheckIfDatesContainReservation(fromDate, toDate);
        if(reservations.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "No reservations found in entered date period", null,JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        DateFormat format = new SimpleDateFormat("dd-MM-yyyy");
        for(Reservation reservation : reservations) {
                    String startDateStr = format.format(reservation.startDate().getTime());
                    String endDateStr = format.format(reservation.endDate().getTime());
                    if(loggedUser != null && (loggedUser.role() == UserRole.EMPLOYEE || loggedUser.role() == UserRole.MANAGER) ) 
                    {
                        String employeeEmail;
                        if(reservation.employeeMail().equals("verify")) {
                            employeeEmail = "";
                        }
                        else {
                            employeeEmail = reservation.employeeMail();
                        }
                        model.addRow(new String[] {String.valueOf(reservation.roomNumber()),startDateStr,endDateStr,employeeEmail,reservation.clientMail()});
                    }
                    else {
                        model.addRow(new String[] {String.valueOf(reservation.roomNumber()),startDateStr,endDateStr});
                    }                    
        }
        this.jTableListHolder.setModel(model);
        this.jPanelListType.setVisible(false);
        this.jToggleButtonRooms.setVisible(true);
        this.jToggleButtonUsers.setVisible(true);
        this.jToggleButtonReservationList.setSelected(false);
        this.jXDatePickerCheckFrom.setDate(null);
        this.jXDatePickerCheckTo.setDate(null);
        this.jPanelCheck.setVisible(false);
    }//GEN-LAST:event_jButtonCheckMouseClicked

    private void jButtonReservationAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonReservationAddMouseClicked
        // TODO add your handling code here:
        ManageFrame manageFrame = new ManageFrame(ManageFrame.ManageMode.RESERVATIONS); 
        this.setVisible(false);
        manageFrame.setVisible(true);
    }//GEN-LAST:event_jButtonReservationAddMouseClicked

    private void jButtonCancelCheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCancelCheckMouseClicked
        // TODO add your handling code here:
        this.jPanelListType.setVisible(false);
        this.jToggleButtonReservationList.setVisible(true);
        this.jToggleButtonUsers.setVisible(true);
        this.jToggleButtonRooms.setSelected(false);
        this.jXDatePickerCheckFrom.setDate(null);
        this.jXDatePickerCheckTo.setDate(null);
        this.jPanelCheck.setVisible(false);
        this.jTableListHolder.setModel(new DefaultTableModel());
    }//GEN-LAST:event_jButtonCancelCheckMouseClicked

    private void jToggleButtonReservationListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButtonReservationListItemStateChanged
        // TODO add your handling code here:
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
            };
            if(loggedUser == null || loggedUser.role() == UserRole.GUEST) {
                model.addColumn("Room");
                model.addColumn("Reservation from");
                model.addColumn("Reservation to");  
            }
            else {
                model.addColumn("Room");
                model.addColumn("Reservation from");
                model.addColumn("Reservation to");
                model.addColumn("Employee email");
                model.addColumn("Guest email");
            }
            DateFormat format = new SimpleDateFormat("dd-MM-yyyy");
        for(Reservation reservation : lists.reservations()) {
            String startDate = format.format(reservation.startDate().getTime());
            String endDate = format.format(reservation.endDate().getTime());
            if( loggedUser != null && loggedUser.role() == UserRole.GUEST && reservation.clientMail().equals(loggedUser.mailAddress())) {
                   model.addRow(new String[] {String.valueOf(reservation.roomNumber()),startDate,endDate});
            }
            else if(loggedUser != null && (loggedUser.role() == UserRole.EMPLOYEE || loggedUser.role() == UserRole.MANAGER) ) 
            {
                String employeeEmail;
                if(reservation.employeeMail().equals("verify")) {
                    employeeEmail = "";
                }
                else {
                    employeeEmail = reservation.employeeMail();
                }
                model.addRow(new String[] {String.valueOf(reservation.roomNumber()),startDate,endDate,employeeEmail,reservation.clientMail()});
            }
        }
       this.jTableListHolder.setModel(model);
    }//GEN-LAST:event_jToggleButtonReservationListItemStateChanged

    private void jToggleButtonRoomsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButtonRoomsItemStateChanged
        // TODO add your handling code here:
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        model.addColumn("Room number");
        model.addColumn("Max capacity");
        model.addColumn("Base reservation price");
        model.addColumn("Has bathroom");
        model.addColumn("Has kitchen");
        model.addColumn("Has good view");
        for(Room room : lists.rooms()) {
            
           String bathStatus; 
           if(room.hasBath()) {
               bathStatus = "yes";
           } 
           else {
               bathStatus = "no";
           }
           
           String viewStatus;
           if(room.hasGoodWindowView()) {
               viewStatus = "yes";
           }
           else {
               viewStatus = "no";
           }
           
           String kitchenStatus;
           if(room.hasKitchen()) {
               kitchenStatus = "yes";
           }
           else {
               kitchenStatus = "no";
           }
           
           model.addRow(new String[]{String.valueOf(room.number()),String.valueOf(room.people()),String.valueOf(room.price()),bathStatus,kitchenStatus,viewStatus});
        }
       this.jTableListHolder.setModel(model);
    }//GEN-LAST:event_jToggleButtonRoomsItemStateChanged

    private void jButtonAddRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddRoomMouseClicked
        // TODO add your handling code here:
        ManageFrame manageFrame = new ManageFrame(ManageFrame.ManageMode.ROOMS); 
        this.setVisible(false);
        manageFrame.setVisible(true);
    }//GEN-LAST:event_jButtonAddRoomMouseClicked

    private void jToggleButtonUsersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButtonUsersItemStateChanged
        // TODO add your handling code here:
         DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
         
         model.addColumn("User name");
         model.addColumn("User email");
         model.addColumn("User role");

        for(User user : lists.users()) {
            String userName = user.name();
            String userEmail = user.mailAddress();
            String userRole = user.role().toString();
            model.addRow(new String [] {userName,userEmail,userRole});
        }
       this.jTableListHolder.setModel(model);
    }//GEN-LAST:event_jToggleButtonUsersItemStateChanged

    private void jButtonValidateReservationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonValidateReservationsMouseClicked
        // TODO add your handling code here:
        if(!this.jToggleButtonReservationList.isSelected()) {
            return;
        }
        if (this.jTableListHolder.getSelectedRowCount() == 0 ) {
            JOptionPane.showMessageDialog(rootPane, "Select reservations to validate", null,JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        int [] selectedRowIndex = this.jTableListHolder.getSelectedRows();
        boolean reservationsModified = false;
        for(int index : selectedRowIndex) {
            String selectedRoom = this.jTableListHolder.getValueAt(index,0).toString();
            String selectedDateFrom = this.jTableListHolder.getValueAt(index,1).toString();
            String selectedDateTo = this.jTableListHolder.getValueAt(index,2).toString();
            String selectedEmployeeEmail = this.jTableListHolder.getValueAt(index,3).toString();
            String selectedClientEmail = this.jTableListHolder.getValueAt(index,4).toString();
            if(!selectedEmployeeEmail.isEmpty()) {
                continue;
            }
            Reservation foundReservation = MainFrame.lists.findReservation(selectedRoom, selectedDateFrom, selectedDateTo, "verify", selectedClientEmail);
            if(foundReservation != null) {
                int foundIndex = lists.reservations().indexOf(foundReservation);
                foundReservation.setEmployeeEmail(loggedUser.mailAddress());
                this.jTableListHolder.setValueAt(foundReservation.employeeMail(),index,3);
                lists.reservations().set(foundIndex, foundReservation);
                reservationsModified = true;
            }       
        }
        
        if(reservationsModified) {
            boolean result = lists.saveLists();
            if(result) {
                JOptionPane.showMessageDialog(rootPane, "Reservations have been validated", null,JOptionPane.INFORMATION_MESSAGE);
            }   
        }
        else {
            JOptionPane.showMessageDialog(rootPane, "No validations have been required", null,JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonValidateReservationsMouseClicked

    private void jButtonClearTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonClearTableMouseClicked
        // TODO add your handling code here:
        this.jTableListHolder.setModel(new DefaultTableModel());
    }//GEN-LAST:event_jButtonClearTableMouseClicked

    private void jButtonReservationCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonReservationCancelMouseClicked
        // TODO add your handling code here:
        if(!this.jToggleButtonReservationList.isSelected()) {
            return;
        }
        
        if (this.jTableListHolder.getSelectedRowCount() == 0 || this.jTableListHolder.getSelectedRowCount() > 1) {
            JOptionPane.showMessageDialog(rootPane, "You can only cancel one reservation at a time", null,JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        int index = this.jTableListHolder.getSelectedRow();
        
        String selectedRoom = this.jTableListHolder.getValueAt(index,0).toString();
        String selectedDateFrom = this.jTableListHolder.getValueAt(index,1).toString();
        String selectedDateTo = this.jTableListHolder.getValueAt(index,2).toString();
        
        if(loggedUser.role() == UserRole.GUEST) {
            Reservation canceledReservation = lists.findReservation(selectedRoom, selectedDateTo, selectedDateTo, "", loggedUser.mailAddress());
            if(canceledReservation != null) {
                int userChoice = JOptionPane.showConfirmDialog(rootPane, "Do you want to cancel this reservation?","Cancel Reservation",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
                if (userChoice == JOptionPane.YES_OPTION) {
                    lists.reservations().remove(canceledReservation);
                    this.jTableListHolder.remove(index);
                    boolean result = lists.saveLists();
                    if(result) {
                        JOptionPane.showMessageDialog(rootPane, "The selected reservation has been canceled", null,JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
        }
        else {
            String selectedEmployeeEmail = this.jTableListHolder.getValueAt(index,3).toString();
            String selectedClientEmail = this.jTableListHolder.getValueAt(index,4).toString();
            if(selectedEmployeeEmail.isEmpty()) {
                selectedEmployeeEmail = "verify";
            }
            Reservation canceledReservation = MainFrame.lists.findReservation(selectedRoom, selectedDateFrom, selectedDateTo, selectedEmployeeEmail, selectedClientEmail);
            if(canceledReservation != null) {
                int userChoice = JOptionPane.showConfirmDialog(rootPane, "Do you want to cancel this reservation?","Cancel Reservation",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
                if (userChoice == JOptionPane.YES_OPTION) {
                    this.jTableListHolder.remove(index);
                    lists.reservations().remove(canceledReservation);
                    boolean result = lists.saveLists();
                    if(result) {
                        JOptionPane.showMessageDialog(rootPane, "The selected reservation has been canceled", null,JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }  
        }
    }//GEN-LAST:event_jButtonReservationCancelMouseClicked

    private void jButtonRemoveUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonRemoveUserMouseClicked
        // TODO add your handling code here:
        if(!this.jToggleButtonUsers.isSelected()) {
            return;
        }
        
        if (this.jTableListHolder.getSelectedRowCount() == 0 || this.jTableListHolder.getSelectedRowCount() > 1) {
            JOptionPane.showMessageDialog(rootPane, "You can only remove one user at a time", null,JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        int index = this.jTableListHolder.getSelectedRow();
        
        String selectedUserEmail = this.jTableListHolder.getValueAt(index,1).toString();
        try {
            User deleteUser = UsersManager.getUserByMail(selectedUserEmail);
            if(deleteUser.mailAddress().equals(loggedUser.mailAddress())) {
                JOptionPane.showMessageDialog(rootPane, "Can't remove currently logged User", null,JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
                int userChoice = JOptionPane.showConfirmDialog(rootPane, "Do you want to remove this user?","User removal",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
                if (userChoice == JOptionPane.YES_OPTION) {
                    this.jTableListHolder.remove(index);
                    lists.users().remove(deleteUser);
                    boolean result = lists.saveLists();
                    if(result) {
                        JOptionPane.showMessageDialog(rootPane, "The selected user has been removed", null,JOptionPane.INFORMATION_MESSAGE);
                        this.jTableListHolder.repaint();
                    }
                }
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "An error has occured during the removal of the selected user", null,JOptionPane.INFORMATION_MESSAGE);
            System.exit(1);
        }
    }//GEN-LAST:event_jButtonRemoveUserMouseClicked

    private void jButtonRemoveRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonRemoveRoomMouseClicked
        // TODO add your handling code here:
        if(!this.jToggleButtonRooms.isSelected()) {
            return;
        }
        
        if (this.jTableListHolder.getSelectedRowCount() == 0 || this.jTableListHolder.getSelectedRowCount() > 1) {
            JOptionPane.showMessageDialog(rootPane, "You can only remove one user at a time", null,JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        int index = this.jTableListHolder.getSelectedRow();
        
        String selectedRoom = this.jTableListHolder.getValueAt(index,0).toString();
        
        Room removedRoom = lists.findRoom(selectedRoom);
        if(removedRoom != null) {
                int userChoice = JOptionPane.showConfirmDialog(rootPane, "Do you want to remove this room?","Remove room",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
                if (userChoice == JOptionPane.YES_OPTION) {
                    this.jTableListHolder.remove(index);
                    lists.rooms().remove(removedRoom);
                    boolean result = lists.saveLists();
                    if(result) {
                        JOptionPane.showMessageDialog(rootPane, "The selected room has been removed", null,JOptionPane.INFORMATION_MESSAGE);
                        this.jTableListHolder.repaint();
                    }
                }
        }
       
    }//GEN-LAST:event_jButtonRemoveRoomMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup ListbuttonGroup;
    private javax.swing.JButton jButtonAddRoom;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonCancelCheck;
    private javax.swing.JButton jButtonCheck;
    private javax.swing.JButton jButtonCheckReservations;
    private javax.swing.JButton jButtonClearTable;
    private javax.swing.JButton jButtonConfirm;
    private javax.swing.JButton jButtonLogIn;
    private javax.swing.JButton jButtonLogOut;
    private javax.swing.JButton jButtonRemoveRoom;
    private javax.swing.JButton jButtonRemoveUser;
    private javax.swing.JButton jButtonReservationAdd;
    private javax.swing.JButton jButtonReservationCancel;
    private javax.swing.JButton jButtonSignIn;
    private javax.swing.JButton jButtonValidateReservations;
    private javax.swing.JCheckBox jCheckBoxEmployee;
    private javax.swing.JCheckBox jCheckBoxGuest;
    private javax.swing.JCheckBox jCheckBoxManager;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanelCheck;
    private javax.swing.JPanel jPanelEmployeeVerification;
    private javax.swing.JPanel jPanelListType;
    private javax.swing.JPanel jPanelLoggedInButtons;
    private javax.swing.JPanel jPanelLogin;
    private javax.swing.JPanel jPanelNameArea;
    private javax.swing.JPanel jPanelUserType;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JPasswordField jPasswordVerifyField;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableListHolder;
    private javax.swing.JTextField jTextFieldEmail;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JToggleButton jToggleButtonReservationList;
    private javax.swing.JToggleButton jToggleButtonRooms;
    private javax.swing.JToggleButton jToggleButtonUsers;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerCheckFrom;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerCheckTo;
    private javax.swing.ButtonGroup userTypeGroup;
    // End of variables declaration//GEN-END:variables
}
